/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    // kotlin("jvm").version("1.5.31")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // implementation(kotlin("stdlib-jdk8"))

    // apache cli
    implementation("commons-cli:commons-cli:1.5.0")

    // TA4J
    implementation("org.ta4j:ta4j-core:0.15")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:30.1.1-jre")

    implementation("io.github.binance:binance-connector-java:3.0.0rc3")
    implementation("com.google.code.gson:gson:2.10.1")

    // Lombok
    compileOnly("org.projectlombok:lombok:1.18.28")
    annotationProcessor("org.projectlombok:lombok:1.18.28")

    // https://mvnrepository.com/artifact/it.unimi.dsi/fastutil
    implementation("it.unimi.dsi:fastutil:8.5.12")

    // Signal Processing 
    implementation("com.github.psambit9791:jdsp:2.0.1")

    // Tests
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.1")
    // lombok 
    testAnnotationProcessor("org.projectlombok:lombok:1.18.28")
    
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use JUnit Jupiter test framework
            useJUnitJupiter("5.8.1")
        }
    }
}

tasks.named<Test>("test") {
    useJUnitPlatform()

    maxHeapSize = "1G"

    testLogging {
        events("passed", "skipped", "failed")
        setExceptionFormat("full")
    }
}

application {
    // Define the main class for the application.
    mainClass.set("net.cryptop.App")
    tasks.run.get().workingDir = rootProject.projectDir
    tasks.run.get().standardInput = System.`in`
}


// tasks.named<JavaExec>("run") {
//     standardInput = System.`in`
// }